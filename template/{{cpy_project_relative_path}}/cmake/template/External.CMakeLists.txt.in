# CCGO generated file: DO NOT EDIT!
# Generated by "CCGO" Template Generator of CMake, CCGO Template Version 1.0.0
#
# Copyright 2024 zhlinh and ccgo Project Authors. All rights reserved.
# Use of this source code is governed by a MIT-style
# license that can be found at
#
# https://opensource.org/license/MIT
#
# The above copyright notice and this permission
# notice shall be included in all copies or
# substantial portions of the Software.

# Set up the external project, downloading the latest from Github
# master if requested.
configure_file(
        ${CMAKE_SOURCE_DIR}/cmake/template/External.Download.txt.in
        ${CMAKE_BINARY_DIR}/@COMM_EXTERNAL_NAME@-external/CMakeLists.txt
        NEWLINE_STYLE LF
)
message(STATUS "Configuring @COMM_EXTERNAL_NAME@ from ${CMAKE_BINARY_DIR}/@COMM_EXTERNAL_NAME@-external")

set(COMM_SAVE_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(COMM_SAVE_CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
if (BUILD_SHARED_LIBS)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGTEST_CREATE_SHARED_LIBRARY=1")
endif()

# Configure and build the source.
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/@COMM_EXTERNAL_NAME@-external)
if(result)
    message(FATAL_ERROR "cmake [GEN] @COMM_EXTERNAL_NAME@ failed: ${result}")
endif()

execute_process(COMMAND ${CMAKE_COMMAND} --build .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/@COMM_EXTERNAL_NAME@-external)
if(result)
    message(FATAL_ERROR "cmake [BUILD] @COMM_EXTERNAL_NAME@ failed: ${result}")
endif()

# Add var setting
set(OUTPUT "")
set(EXTRA_CONFIGURE_COMMANDS "@COMM_EXTERNAL_EXTRA_CONFIGURE_COMMANDS@")
if (EXTRA_CONFIGURE_COMMANDS)
  string(REPLACE " " ";" COMMANDS_LIST "${EXTRA_CONFIGURE_COMMANDS}")
  message(STATUS "ExternalCFG COMMANDS_LIST ${COMMANDS_LIST}")
  foreach(COMMAND IN LISTS COMMANDS_LIST)
      if("${COMMAND}" STREQUAL "")
          continue()
      endif()
      message(STATUS "ExternalCFG Configure command: ${COMMAND}")
      if("${COMMAND}" MATCHES "^-D([^=]+)=(ON|OFF)$")
          set(VAR_NAME ${CMAKE_MATCH_1})
          set(VALUE ${CMAKE_MATCH_2})

          string(APPEND OUTPUT
              "set(${VAR_NAME} ${VALUE})\n"
          )
          set(${VAR_NAME} ${VALUE} CACHE BOOL "" FORCE)
          message(STATUS "ExternalCFG Success Setting ${VAR_NAME} to ${VALUE}")
      else()
          message(WARNING "ExternalCFG Skip Setting: ${COMMAND}")
      endif()
  endforeach()
else()
    message(STATUS "ExternalCFG No extra configure commands provided.")
endif()

message(STATUS "ExternalCFG Parsed configure commands:\n${OUTPUT}")

set(CMAKE_CXX_FLAGS ${COMM_SAVE_CMAKE_CXX_FLAGS})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${COMM_SAVE_CMAKE_RUNTIME_OUTPUT_DIRECTORY})

# Add include
include_directories(${COMM_EXTERNAL_SOURCE_DIR}/include)
set(TEMP_INCLUDES "@COMM_EXTERNAL_INCLUDES@")
if (TEMP_INCLUDES)
  string(REPLACE " " ";" TEMP_INCLUDES_LIST "${TEMP_INCLUDES}")
  message(STATUS "ExternalINC INCLUDES_LIST ${TEMP_INCLUDES_LIST}")
   foreach(TEMP_ITEM IN LISTS TEMP_INCLUDES_LIST)
       if("${TEMP_ITEM}" STREQUAL "")
           continue()
       endif()
       include_directories(${COMM_EXTERNAL_SOURCE_DIR}/${TEMP_ITEM})
       message(STATUS "ExternalINC include: ${COMM_EXTERNAL_SOURCE_DIR}/${TEMP_ITEM}")
   endforeach()
else()
  message(STATUS "ExternalINC No extra include directories provided.")
endif()

# Add directly to our build
add_subdirectory(${COMM_EXTERNAL_SOURCE_DIR} ${COMM_EXTERNAL_BUILD_DIR} EXCLUDE_FROM_ALL)
